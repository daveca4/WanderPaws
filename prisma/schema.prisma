generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model WeatherLocation {
  id        String   @id @default(cuid())
  name      String
  postcode  String
  latitude  Float
  longitude Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id        String   @id @default(cuid())
  type      String
  title     String
  message   String
  severity  String
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id             String             @id @default(cuid())
  email          String             @unique
  passwordHash   String?
  name           String?
  role           String             @default("owner")
  emailVerified  Boolean            @default(false)
  image          String?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  owner          Owner?
  stripeCustomer StripeCustomer?
  subscriptions  UserSubscription[]
  walker         Walker?
}

model UserSubscription {
  id               String          @id @default(cuid())
  userId           String
  planId           String
  planName         String
  walkCredits      Int
  walkDuration     Int
  creditsRemaining Int
  startDate        DateTime        @default(now())
  endDate          DateTime
  status           String          @default("active")
  purchaseAmount   Int
  purchaseDate     DateTime        @default(now())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  stripePayments   StripePayment[]
  user             User            @relation(fields: [userId], references: [id])
}

model StripeCustomer {
  id        String   @id
  userId    String   @unique
  email     String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model StripePayment {
  id                String            @id
  stripeCustomerId  String?
  subscriptionId    String?
  amount            Int
  currency          String            @default("gbp")
  status            String
  paymentIntentId   String?
  checkoutSessionId String?
  metadata          Json?
  createdAt         DateTime          @default(now())
  subscription      UserSubscription? @relation(fields: [subscriptionId], references: [id])
}

model Dog {
  id               String   @id @default(cuid())
  name             String
  breed            String
  age              Int
  size             String
  temperament      String[]
  specialNeeds     String[]
  ownerId          String
  imageUrl         String?
  assessmentStatus String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  address          Json
  owner            Owner    @relation(fields: [ownerId], references: [id])
  walks            Walk[]
}

model Owner {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String
  address   Json
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  dogs      Dog[]
  user      User     @relation(fields: [userId], references: [id])
}

model Walker {
  id                       String   @id @default(cuid())
  name                     String
  email                    String
  phone                    String
  bio                      String
  rating                   Float
  availability             Json
  specialties              String[]
  preferredDogSizes        String[]
  certificationsOrTraining String[]
  imageUrl                 String?
  userId                   String   @unique
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  walks                    Walk[]
  user                     User     @relation(fields: [userId], references: [id])
}

model Walk {
  id                String   @id @default(cuid())
  dogId             String
  walkerId          String
  date              DateTime
  startTime         String
  timeSlot          String
  duration          Int
  status            String
  notes             String?
  route             Json?
  feedback          Json?
  metrics           Json?
  subscriptionId    String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  dropoffLocation   Json?
  isTrackingActive  Boolean  @default(false)
  pickupLocation    Json?
  routeCoordinates  Json?
  walkEndLocation   Json?
  walkStartLocation Json?
  dog               Dog      @relation(fields: [dogId], references: [id])
  walker            Walker   @relation(fields: [walkerId], references: [id])
}

model TimeSlot {
  id        String   @id @default(cuid())
  start     String
  end       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Assessment {
  id               String   @id @default(cuid())
  dogId            String
  ownerId          String
  createdDate      DateTime @default(now())
  scheduledDate    DateTime
  assignedWalkerId String?
  status           String
  result           String?
  adminNotes       String?
  resultNotes      String?
  feedback         Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Conversation {
  id           String    @id @default(cuid())
  participants String[]
  title        String?
  type         String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  messages     Message[]
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  senderId       String
  content        String
  timestamp      DateTime     @default(now())
  readStatus     String
  attachments    Json?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  conversation   Conversation @relation(fields: [conversationId], references: [id])
}

model SubscriptionPlan {
  id                 String   @id @default(cuid())
  name               String
  description        String
  price              Int
  walkCredits        Int
  walkDuration       Int
  isActive           Boolean  @default(true)
  discountPercentage Int?
  features           String[]
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model HolidayRequest {
  id        String   @id @default(cuid())
  walkerId  String
  date      String
  reason    String
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
